{"version":3,"sources":["img/preloader4.png","components/fallback.js","components/welcome.js","App.js","serviceWorker.js","index.js","consumeApi.js"],"names":["module","exports","Welcome","Component","divStyle","height","color","orange","paddingTop","consumeApi","loading","error","data","style","src","require","alt","className","title","description","quote","quoteAuthor","News","lazy","UndergraduateDegrees","GraduateDegrees","Minors","Employment","Map","PeopleFaculty","PeopleStaff","Research","ResearchFaculty","Resources","Footer","App","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","ConsumeApi","path","useState","setLoading","setError","setData","useEffect","axios","method","url","params","res","e"],"mappings":"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","file":"static/js/main.e54ad92c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloader4.eaa1452f.png\";","import React, { Component } from 'react'\n\nclass Welcome extends Component{\n    render(){\n        return( \n            <div>\n                <div>Loading...</div>\n            </div>     \n    )}\n}\n\nexport default Welcome;","import React from 'react'\nimport consumeApi from '../consumeApi';\n\n\nconst divStyle = {\n    height: '100%',\n    color: 'white'\n};\nconst orange = {color: '#F76902'};\nconst paddingTop = {paddingTop: '20%'}\n\nexport default function Welcome() {\n        const {\n            loading, \n            error, \n            data\n        } = consumeApi('/about/')\n        if(loading){\n            return(\n                <div style={divStyle}>\n                    <img src={require('../img/preloader4.png')} alt='preloader' />\n                </div>\n            )\n        }\n        else if(error){\n            return(\n                <div style={divStyle}>\n                    <div>Error...</div>\n                </div>\n            )\n        }\n        else{\n            return(\n                <div style={divStyle}>\n                    <h1 style={paddingTop} className=\"display-3 w-50 mx-auto\"><span style={orange}>Information</span> Sciences &amp; Technologies at RIT</h1>\n                    <div className='bg-light text-dark w-75 mx-auto mt-1' >\n                        <h4 className='pt-2'>{data.title}</h4>\n                        <p>{data.description}</p>\n                        <blockquote className='blockquote'>&quot;{data.quote}&quot;</blockquote>\n                        <p>- {data.quoteAuthor}</p>\n                    </div>\n                </div>     \n            )\n        }\n        \n}\n","import React, { Component, Suspense, lazy} from 'react'\nimport './App.css';\n\nimport Fallback from './components/fallback'\n\nimport Welcome from './components/welcome'\n\n//TODO implement news\nconst News = lazy(() => { return import('./components/news')})\nconst UndergraduateDegrees = lazy(() => { return import('./components/undergraduateDegrees')})\nconst GraduateDegrees = lazy(() => { return import('./components/graduateDegrees')})\nconst Minors = lazy(() => { return import('./components/minors')})\nconst Employment = lazy(() => { return import('./components/employment')})\nconst Map = lazy(() => { return import('./components/map')})\nconst PeopleFaculty = lazy(() => { return import('./components/peopleFaculty')})\nconst PeopleStaff = lazy(() => { return import('./components/peopleStaff')})\nconst Research = lazy(() => { return import('./components/research')})\nconst ResearchFaculty = lazy(() => { return import('./components/researchFaculty')})\nconst Resources = lazy(() => { return import('./components/resources')})\nconst Footer = lazy(() => { return import('./components/footer')})\n\nclass App extends Component {\n  render(){\n    return(\n      <div className=\"App\"> \n        <Welcome  />\n        <Suspense fallback={<Fallback />}>\n          <News />\n        </Suspense>\n        <Suspense fallback={<Fallback />}>\n          <UndergraduateDegrees />\n        </Suspense>\n        <Suspense fallback={<Fallback />}>\n          <GraduateDegrees />\n        </Suspense>\n        <Suspense fallback={<Fallback />}>\n          <Minors />\n        </Suspense>\n        <Suspense fallback={<Fallback />}>\n          <Employment />\n        </Suspense>\n        <Suspense fallback={<Fallback />}>\n          <Map />\n        </Suspense>\n        <Suspense fallback={<Fallback />}>\n          <PeopleFaculty />\n        </Suspense>\n        <Suspense fallback={<Fallback />}>\n          <PeopleStaff />\n        </Suspense>\n        <Suspense fallback={<Fallback />}>\n          <Research />\n        </Suspense>\n        <Suspense fallback={<Fallback />}>\n          <ResearchFaculty />\n        </Suspense>\n        <Suspense fallback={<Fallback />}>\n          <Resources />\n        </Suspense>\n        <Suspense fallback={<Fallback />}>\n          <Footer />\n        </Suspense>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nexport default function ConsumeApi(path) {\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState(false)\n    const [data, setData] = useState({data: []})\n\n    useEffect(() => {\n        setLoading(true)\n        setError(false)\n        axios({\n            method: 'GET',\n            // url: 'http://localhost:8888/proxy.php',\n            url: 'http://http://24.59.152.173:8888/index.php',\n            params: { path: path }\n        }).then(res => {\n            setData(res.data)\n            setLoading(false)\n        }).catch(e => {\n            setError(true)\n        })\n    }, [path])\n    return { loading, error, data }\n}"],"sourceRoot":""}